
-- PostgreSQL scripty na vytvorenie tabuliek + trigger funkcie

 CREATE TABLE tests
(
  id SERIAL,
  name character varying(64),
  added_by character varying(64),
  uploaded timestamp with time zone DEFAULT transaction_timestamp(),
  last_modified timestamp with time zone DEFAULT transaction_timestamp(),
  segments_amount integer DEFAULT 0,
  CONSTRAINT tests_pkey PRIMARY KEY (id),
  CONSTRAINT unique_name UNIQUE (name)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE tests
  OWNER TO postgres;

CREATE TABLE segments
(
  id SERIAL,
  test_id integer,
  added_by character varying(64),
  file_path character varying(64),
  uploaded timestamp with time zone DEFAULT transaction_timestamp(),
  CONSTRAINT segments_pkey PRIMARY KEY (id),
  CONSTRAINT segments_test_id_fkey FOREIGN KEY (test_id)
      REFERENCES tests (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE segments
  OWNER TO postgres;

-- Trigger: update_last_modified on tests

-- DROP TRIGGER update_last_modified ON tests;
  
  CREATE OR REPLACE FUNCTION increment_segments_count()
  RETURNS trigger AS
$BODY$
BEGIN
    NEW.segments_amount = OLD.segments_amount + 1;
    RETURN NEW;	
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION increment_segments_count()
  OWNER TO postgres;
  
  CREATE OR REPLACE FUNCTION update_last_modified_column()
  RETURNS trigger AS
$BODY$
BEGIN
    NEW.last_modified = now();
    RETURN NEW;	
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION update_last_modified_column()
  OWNER TO postgres;
  
  CREATE TRIGGER update_last_modified
  BEFORE UPDATE
  ON tests
  FOR EACH ROW
  EXECUTE PROCEDURE update_last_modified_column();
